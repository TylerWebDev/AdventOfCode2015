Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Http = Elm.Http.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var getRibbonRequiredForBow = function (dimensions) {    return dimensions.width * dimensions.length * dimensions.height;};
   var safeToInt = function (_p0) {    return A2($Maybe.withDefault,0,$Result.toMaybe($String.toInt(_p0)));};
   var defaultEmptyTail = function (_p1) {    return A2($Maybe.withDefault,_U.list([]),$List.tail(_p1));};
   var default0Head = function (_p2) {    return A2($Maybe.withDefault,0,$List.head(_p2));};
   var getRibbonRequiredForPresent = function (dimensions) {
      var twoShortest = defaultEmptyTail($List.reverse($List.sort(_U.list([dimensions.length,dimensions.width,dimensions.height]))));
      var a = default0Head(twoShortest);
      var b = default0Head(defaultEmptyTail(twoShortest));
      return 2 * a + 2 * b;
   };
   var getTotalRibbonRequiredForDimensions = function (dimensions) {    return getRibbonRequiredForPresent(dimensions) + getRibbonRequiredForBow(dimensions);};
   var default0Minimum = function (_p3) {    return A2($Maybe.withDefault,0,$List.minimum(_p3));};
   var surfaceArea = function (dimensions) {
      return 2 * dimensions.length * dimensions.width + 2 * dimensions.width * dimensions.height + 2 * dimensions.height * dimensions.length;
   };
   var getRequiredSlack = function (dimensions) {
      return default0Minimum(_U.list([dimensions.length * dimensions.width,dimensions.width * dimensions.height,dimensions.height * dimensions.length]));
   };
   var getRequiredSquareFeetOfPaper = function (dimensions) {    return surfaceArea(dimensions) + getRequiredSlack(dimensions);};
   var dimensions = {length: 0,width: 0,height: 0};
   var listToDimensions = function (list) {
      return _U.update(dimensions,
      {length: default0Head(list),width: default0Head(defaultEmptyTail(list)),height: default0Head(defaultEmptyTail(defaultEmptyTail(list)))});
   };
   var getDimensionsFromStringFormat = function (dimensions) {    return listToDimensions(A2($List.map,safeToInt,A2($String.split,"x",dimensions)));};
   var getSquareFootFromStringDimensions = function (string) {    return getRequiredSquareFeetOfPaper(getDimensionsFromStringFormat(string));};
   var day2part1 = function (input) {    return $List.sum(A2($List.map,getSquareFootFromStringDimensions,A2($String.split,"\n",input)));};
   var day2part2 = function (input) {
      return $List.sum(A2($List.map,
      function (_p4) {
         return getTotalRibbonRequiredForDimensions(getDimensionsFromStringFormat(_p4));
      },
      A2($String.split,"\n",input)));
   };
   var Dimensions = F3(function (a,b,c) {    return {length: a,width: b,height: c};});
   var inputMailbox = $Signal.mailbox("");
   var requests = Elm.Native.Task.make(_elm).perform($Task.toResult(A2($Task.andThen,$Http.getString("input.txt"),$Signal.send(inputMailbox.address))));
   var view = function (input) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.div,_U.list([]),_U.list([$Html.text(A2($Basics._op["++"],"Day 2 Part 1: ",$Basics.toString(day2part1(input))))]))
              ,A2($Html.div,_U.list([]),_U.list([$Html.text(A2($Basics._op["++"],"Day 2 Part 2: ",$Basics.toString(day2part2(input))))]))]));
   };
   var main = A2($Signal.map,view,inputMailbox.signal);
   return _elm.Main.values = {_op: _op
                             ,main: main
                             ,view: view
                             ,inputMailbox: inputMailbox
                             ,Dimensions: Dimensions
                             ,dimensions: dimensions
                             ,getRequiredSquareFeetOfPaper: getRequiredSquareFeetOfPaper
                             ,getRequiredSlack: getRequiredSlack
                             ,surfaceArea: surfaceArea
                             ,default0Minimum: default0Minimum
                             ,default0Head: default0Head
                             ,defaultEmptyTail: defaultEmptyTail
                             ,listToDimensions: listToDimensions
                             ,safeToInt: safeToInt
                             ,getDimensionsFromStringFormat: getDimensionsFromStringFormat
                             ,getSquareFootFromStringDimensions: getSquareFootFromStringDimensions
                             ,day2part1: day2part1
                             ,getTotalRibbonRequiredForDimensions: getTotalRibbonRequiredForDimensions
                             ,getRibbonRequiredForPresent: getRibbonRequiredForPresent
                             ,getRibbonRequiredForBow: getRibbonRequiredForBow
                             ,day2part2: day2part2};
};