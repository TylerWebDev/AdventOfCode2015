Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Http = Elm.Http.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var isEven = function (x) {    return _U.eq(A2($Basics._op["%"],x,2),0);};
   var zip = $List.map2(F2(function (v0,v1) {    return {ctor: "_Tuple2",_0: v0,_1: v1};}));
   var getNewLocationFromSymbol = F2(function (location,string) {
      var _p0 = string;
      switch (_p0)
      {case "^": return {ctor: "_Tuple2",_0: $Basics.fst(location),_1: $Basics.snd(location) + 1};
         case "<": return {ctor: "_Tuple2",_0: $Basics.fst(location) - 1,_1: $Basics.snd(location)};
         case ">": return {ctor: "_Tuple2",_0: $Basics.fst(location) + 1,_1: $Basics.snd(location)};
         case "v": return {ctor: "_Tuple2",_0: $Basics.fst(location),_1: $Basics.snd(location) - 1};
         default: return location;}
   });
   var location = {ctor: "_Tuple2",_0: 0,_1: 0};
   var headDefaultStartingLocation = function (_p1) {    return A2($Maybe.withDefault,location,$List.head(_p1));};
   var appendNewLocationFromSymbolToLocations = F2(function (symbol,locations) {
      return A2($Basics._op["++"],locations,_U.list([A2(getNewLocationFromSymbol,headDefaultStartingLocation($List.reverse(locations)),symbol)]));
   });
   var getAllLocationsFromInputSymbolList = function (input) {    return A3($List.foldl,appendNewLocationFromSymbolToLocations,_U.list([]),input);};
   var day2part1 = function (input) {    return $Set.size($Set.fromList(getAllLocationsFromInputSymbolList(A2($String.split,"",input))));};
   var day2part2 = function (input) {
      var len = $String.length(input);
      var directions = A2($String.split,"",input);
      return $Set.size($Set.fromList(function (x) {
         return A2($Basics._op["++"],_U.list([location]),x);
      }(A2($Basics._op["++"],
      getAllLocationsFromInputSymbolList($Basics.snd($List.unzip(A2($List.filter,
      function (x) {
         return isEven($Basics.fst(x));
      },
      A2(zip,_U.range(0,len),directions))))),
      getAllLocationsFromInputSymbolList($Basics.snd($List.unzip(A2($List.filter,
      function (x) {
         return $Basics.not(isEven($Basics.fst(x)));
      },
      A2(zip,_U.range(0,len),directions)))))))));
   };
   var inputMailbox = $Signal.mailbox("");
   var requests = Elm.Native.Task.make(_elm).perform($Task.toResult(A2($Task.andThen,$Http.getString("input.txt"),$Signal.send(inputMailbox.address))));
   var view = function (input) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.div,_U.list([]),_U.list([$Html.text(A2($Basics._op["++"],"Day 3 Part 1: ",$Basics.toString(day2part1(input))))]))
              ,A2($Html.div,_U.list([]),_U.list([$Html.text(A2($Basics._op["++"],"Day 3 Part 2: ",$Basics.toString(day2part2(input))))]))]));
   };
   var main = A2($Signal.map,view,inputMailbox.signal);
   return _elm.Main.values = {_op: _op
                             ,main: main
                             ,view: view
                             ,inputMailbox: inputMailbox
                             ,location: location
                             ,getNewLocationFromSymbol: getNewLocationFromSymbol
                             ,headDefaultStartingLocation: headDefaultStartingLocation
                             ,appendNewLocationFromSymbolToLocations: appendNewLocationFromSymbolToLocations
                             ,getAllLocationsFromInputSymbolList: getAllLocationsFromInputSymbolList
                             ,day2part1: day2part1
                             ,zip: zip
                             ,isEven: isEven
                             ,day2part2: day2part2};
};